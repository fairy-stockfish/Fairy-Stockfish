# Fairy-Stockfish, a UCI chess variant playing engine derived from Stockfish
# Copyright (C) 2018-2019 Fabian Fichter
#
# Fairy-Stockfish is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Fairy-Stockfish is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This is a configuration file to add user-defined variants to Fairy-Stockfish.

################################################
### Usage:
# Add "load" and the file path to the SF call (e.g., "./stockfish load variants.ini")
# or set the UCI option "VariantPath" to the path of this file in order to load it.

################################################
### Variant configuration:
# The variant name needs to be specified as a section in square brackets,
# followed by its rule configurations as key-value pairs.
# See variants.h for the available options and their default values.
# If you encounter problems configuring variants, please report them at:
# https://github.com/ianfab/Fairy-Stockfish/issues

### Piece types
# Firstly, the piece types for a variant need to be defined.
# For that, specify the letter used for each piece type, e.g.:
# pawn = p
#
# See the list below for all available piece types:
# pawn
# knight
# bishop
# rook
# queen
# fers
# alfil
# fers_alfil (=fers+alfil)
# silver
# aiwok (=rook+knight+fers)
# bers (=rook+fers)
# archbishop (=bishop+knight)
# chancellor(=rook+bishop)
# amazon (=queen+knight)
# knibis
# biskni
# shogi_pawn
# lance
# shogi_knight
# euroshogi_knight
# gold
# horse
# clobber
# breakthrough
# immobile (piece without moves)
# cannon
# wazir
# commoner (non-royal king)
# king

### Option types
# [bool]: boolean flag to enable/disable a feature [true, false]
# [Rank]: denotes a rank of the board [1-10]
# [File]: denotes a file of the board [1-12, a-i]
# [int]: any natural number [0, 1, ...]
# [PieceType]: a piece type [letters defined for pieces, e.g., p]
# [Bitboard]: list of squares [e.g., d4 e4 d5 e5]
# [Value]: game result for the side to move [win, loss, draw]
# [CountingRule]: makruk or ASEAN counting rules [makruk, asean, none]

### Rule definition options
# variantTemplate: only relevant for usage in XBoard/WinBoard GUI [values: fairy, shogi] (default: fairy)
# pocketSize: number of pockets shown by XBoard/WinBoard for drop variants [int] (default: 0)
# maxRank: maximum rank [Rank] (default: 8)
# maxFile: maximum file [File] (default: 8)
# chess960: allow chess960 castling [bool] (default: false)
# startFen: FEN of starting position (default: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1)
# promotionRank: relative rank required to reach for promotion [Rank] (default: 8)
# promotionPieceTypes: letters of promotion piece options (default: nbrq)
# sittuyinPromotion: [bool] (default: false)
# promotionLimit:
# promotedPieceType:
# piecePromotionOnCapture: [bool] (default: false)
# mandatoryPawnPromotion: [bool] (default: true)
# mandatoryPiecePromotion: [bool] (default: false)
# pieceDemotion: [bool] (default: false)
# endgameEval: [bool] (default: false)
# doubleStep: enable pawn double step [bool] (default: true)
# doubleStepRank: [Rank] (default: <none>)
# firstRankDoubleSteps: [bool] (default: false)
# castling: enable castling [bool] (default: true)
# castlingDroppedPiece: [bool] (default: false)
# castlingKingsideFile: [File] (default: g)
# castlingQueensideFile: [File] (default: c)
# castlingRank: relative rank of castling [Rank] (default: 1)
# checking: allow checks [bool] (default: true)
# mustCapture: [bool] (default: false)
# mustDrop: [bool] (default: false)
# pieceDrops: [bool] (default: false)
# dropLoop: [bool] (default: false)
# capturesToHand: [bool] (default: false)
# firstRankDrops: [bool] (default: false)
# dropOnTop: [bool] (default: false)
# whiteDropRegion: [Bitboard]
# blackDropRegion: [Bitboard]
# sittuyinRookDrop: [bool] (default: false)
# dropOppositeColoredBishop: [bool] (default: false)
# dropPromoted: [bool] (default: false)
# shogiDoubledPawn: allow shogi pawns to be doubled [bool] (default: true)
# immobilityIllegal: [bool] (default: false)
# gating: maintain squares on backrank with extra rights in castling field of FEN [bool] (default: false)
# seirawanGating: allow gating of pieces in hand like in S-Chess, requires "gating = true" [bool] (default: false)
# cambodianMoves: enable special moves of cambodian chess, requires "gating = true" [bool] (default: false)
# nMoveRule: [int] (default: 50)
# nFoldRule: [int] (default: 3)
# nFoldValue: [Value] (default: draw)
# nFoldValueAbsolute: [bool] (default: false)
# perpetualCheckIllegal: [bool] (default: false)
# stalemateValue: [Value] (default: draw)
# checkmateValue: [Value] (default: loss)
# shogiPawnDropMateIllegal: [bool] (default: false)
# shatarMateRule: [bool] (default: false)
# bareKingValue: [Value] (default: <none>)
# extinctionValue: [Value] (default: <none>)
# bareKingMove: [bool] (default: false)
# extinctionPieceTypes:
# flagPiece: [PieceType] (default: <none>)
# whiteFlag: [Bitboard] (default: <none>)
# blackFlag: [Bitboard] (default: <none>)
# flagMove: [bool] (default: false)
# checkCounting: [bool] (default: false)
# connectN: number of aligned pieces for win [int] (default: 0)
# countingRule: enable counting rules [CountingRule] (default: <none>)

################################################
### Example for minishogi configuration that would be equivalent to the built-in variant:

# [minishogi]
# variantTemplate = shogi
# maxRank = 5
# maxFile = 5
# shogi_pawn = p
# silver = s
# gold = g
# bishop = b
# horse = h
# rook = r
# bers = d
# king = k
# startFen = rbsgk/4p/5/P4/KGSBR[-] w 0 1
# pieceDrops = true
# capturesToHand = true
# promotionRank = 5
# doubleStep = false
# castling = false
# promotedPieceType = p:g s:g b:h r:d
# shogiDoubledPawn = false
# immobilityIllegal = true
# shogiPawnDropMateIllegal = true
# stalemateValue = loss
# nFoldRule = 4
# nMoveRule = 0
# perpetualCheckIllegal = true
# pocketSize = 5
# nFoldValue = loss
# nFoldValueAbsolute = true

# Hybrid variant of three-check chess and crazyhouse, using crazyhouse as a template
[3check-crazyhouse:crazyhouse]
startFen = rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR[] w KQkq - 3+3 0 1
checkCounting = true

# Crazyhouse with mandatory captures, using crazyhouse as a template
[coffeehouse:crazyhouse]
mustCapture = true

# Hybrid variant of makruk and crazyhouse
[makrukhouse:makruk]
pieceDrops = true
capturesToHand = true

# Hybrid variant of antichess and losalamos
[anti-losalamos]
pawn = p
knight = n
rook = r
queen = q
commoner = k
maxRank = 6
maxFile = 6
startFen = rnqknr/pppppp/6/6/PPPPPP/RNQKNR w - - 0 1
promotionRank = 6
promotionPieceTypes = nrqk
doubleStep = false
castling = false
mustCapture = true
stalemateValue = win
extinctionValue = win
extinctionPieceTypes = *

# Indian great chess
# https://www.chessvariants.com/historic.dir/indiangr1.html
[indiangreat]
pawn = p
knight = n
bishop = b
rook = r
queen = q
king = k
archbishop = v
chancellor = w
amazon = g
maxRank = 10
maxFile = 10
startFen = rnbqkgvbnr/ppppwwpppp/4pp4/10/10/10/10/4PP4/PPPPWWPPPP/RNBVGKQBNR w - - 0 1
promotionRank = 10
promotionPieceTypes = q
doubleStep = false
castling = false

# Peasant revolt
# https://www.chessvariants.com/large.dir/peasantrevolt.html
[peasant:chess]
startFen = 1nn1k1n1/4p3/8/8/8/8/PPPPPPPP/4K3 w - - 0 1

[tictactoe]
maxRank = 3
maxFile = 3
immobile = p
startFen = 3/3/3[PPPPPpppp] w - - 0 1
pieceDrops = true
doubleStep = false
castling = false
stalemateValue = draw
immobilityIllegal = false
connectN = 3

[connect4]
maxRank = 6
maxFile = 7
immobile = p
startFen = 7/7/7/7/7/7[PPPPPPPPPPPPPPPPPPPPPppppppppppppppppppppp] w - - 0 1
pieceDrops = true
dropOnTop = true
doubleStep = false
castling = false
stalemateValue = draw
immobilityIllegal = false
connectN = 4
nMoveRule = 0
