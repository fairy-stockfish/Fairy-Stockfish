# Fairy-Stockfish, a UCI chess variant playing engine derived from Stockfish
# Copyright (C) 2018-2019 Fabian Fichter
#
# Fairy-Stockfish is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Fairy-Stockfish is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This is a configuration file to add user-defined variants to Fairy-Stockfish.

################################################
### Usage:
# Add "load" and the file path to the SF call (e.g., "./stockfish load variants.ini")
# or set the UCI option "VariantPath" to the path of this file in order to load it.

################################################
### Variant configuration:
# The variant name needs to be specified as a section in square brackets,
# followed by its rule configurations as key-value pairs.
# See variants.h for the available options and their default values.
# If you encounter problems configuring variants, please report them at:
# https://github.com/ianfab/Fairy-Stockfish/issues

### Piece types
# Firstly, the piece types for a variant need to be defined.
# For that, specify the letter used for each piece type, e.g.:
# pawn = p
#
# See the list below for all available piece types:
# pawn
# knight
# bishop
# rook
# queen
# fers
# alfil
# fers_alfil (=fers+alfil)
# silver
# aiwok (=rook+knight+fers)
# bers (=rook+fers)
# archbishop (=bishop+knight)
# chancellor(=rook+bishop)
# amazon (=queen+knight)
# knibis
# biskni
# shogi_pawn
# lance
# shogi_knight
# euroshogi_knight
# gold
# horse
# clobber
# breakthrough
# immobile (piece without moves)
# cannon
# wazir
# commoner (non-royal king)
# king

### Rule options
# variantTemplate
# pocketSize
# maxRank: maximum rank (e.g., 8)
# maxFile: maximum file (e.g., 8 or h)
# chess960: allow chess960 castling (true/false)
# startFen: FEN of starting position
# promotionRank: relative rank required to reach for promotion (e.g., 8)
# promotionPieceTypes: pieces letters of promotion options (e.g., nbrq)
# sittuyinPromotion: (true/false)
# promotionLimit
# promotedPieceType
# piecePromotionOnCapture: (true/false)
# mandatoryPawnPromotion: (true/false)
# mandatoryPiecePromotion: (true/false)
# pieceDemotion: (true/false)
# endgameEval: (true/false)
# doubleStep: (true/false)
# doubleStepRank
# firstRankDoubleSteps: (true/false)
# castling: (true/false)
# castlingDroppedPiece: (true/false)
# castlingKingsideFile: e.g., g
# castlingQueensideFile: e.g., c
# castlingRank: relative rank of castling, e.g., 1
# checking: (true/false)
# mustCapture: (true/false)
# mustDrop: (true/false)
# pieceDrops: (true/false)
# dropLoop: (true/false)
# capturesToHand: (true/false)
# firstRankDrops: (true/false)
# dropOnTop: (true/false)
# whiteDropRegion
# blackDropRegion
# sittuyinRookDrop: (true/false)
# dropOppositeColoredBishop: (true/false)
# dropPromoted: (true/false)
# shogiDoubledPawn: (true/false)
# immobilityIllegal: (true/false)
# gating: (true/false)
# nMoveRule: e.g., 50
# nFoldRule: e.g., 3
# nFoldValue: (win/draw/loss)
# nFoldValueAbsolute: (true/false)
# perpetualCheckIllegal: (true/false)
# stalemateValue: (win/draw/loss)
# checkmateValue: (win/draw/loss)
# shogiPawnDropMateIllegal: (true/false)
# shatarMateRule: (true/false)
# bareKingValue: (win/draw/loss)
# extinctionValue: (win/draw/loss)
# bareKingMove: (true/false)
# extinctionPieceTypes
# flagPiece
# whiteFlag
# blackFlag
# flagMove: (true/false)
# checkCounting: (true/false)
# connectN: number of aligned pieces for win (e.g., 4)
# countingRule: (makruk/asean)

################################################
### Example for minishogi configuration that would be equivalent to the built-in variant:

# [minishogi]
# variantTemplate = shogi
# maxRank = 5
# maxFile = 5
# shogi_pawn = p
# silver = s
# gold = g
# bishop = b
# horse = h
# rook = r
# bers = d
# king = k
# startFen = rbsgk/4p/5/P4/KGSBR[-] w 0 1
# pieceDrops = true
# capturesToHand = true
# promotionRank = 5
# doubleStep = false
# castling = false
# promotedPieceType = p:g s:g b:h r:d
# shogiDoubledPawn = false
# immobilityIllegal = true
# shogiPawnDropMateIllegal = true
# stalemateValue = loss
# nFoldRule = 4
# nMoveRule = 0
# perpetualCheckIllegal = true
# pocketSize = 5
# nFoldValue = loss
# nFoldValueAbsolute = true

# Hybrid variant of three-check chess and crazyhouse, using crazyhouse as a template
[3check-crazyhouse:crazyhouse]
startFen = rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR[] w KQkq - 3+3 0 1
checkCounting = true

# Crazyhouse with mandatory captures, using crazyhouse as a template
[coffeehouse:crazyhouse]
mustCapture = true

# Hybrid variant of makruk and crazyhouse
[makrukhouse:makruk]
pieceDrops = true
capturesToHand = true

# Hybrid variant of antichess and losalamos
[anti-losalamos]
pawn = p
knight = n
rook = r
queen = q
commoner = k
maxRank = 6
maxFile = 6
startFen = rnqknr/pppppp/6/6/PPPPPP/RNQKNR w - - 0 1
promotionRank = 6
promotionPieceTypes = nrqk
doubleStep = false
castling = false
mustCapture = true
stalemateValue = win
extinctionValue = win
extinctionPieceTypes = *

# Indian great chess
# https://www.chessvariants.com/historic.dir/indiangr1.html
[indiangreat]
pawn = p
knight = n
bishop = b
rook = r
queen = q
king = k
archbishop = v
chancellor = w
amazon = g
maxRank = 10
maxFile = 10
startFen = rnbqkgvbnr/ppppwwpppp/4pp4/10/10/10/10/4PP4/PPPPWWPPPP/RNBVGKQBNR w - - 0 1
promotionRank = 10
promotionPieceTypes = q
doubleStep = false
castling = false

# Peasant revolt
# https://www.chessvariants.com/large.dir/peasantrevolt.html
[peasant:chess]
startFen = 1nn1k1n1/4p3/8/8/8/8/PPPPPPPP/4K3 w - - 0 1

[tictactoe]
maxRank = 3
maxFile = 3
immobile = p
startFen = 3/3/3[PPPPPpppp] w - - 0 1
pieceDrops = true
doubleStep = false
castling = false
stalemateValue = draw
immobilityIllegal = false
connectN = 3

[connect4]
maxRank = 6
maxFile = 7
immobile = p
startFen = 7/7/7/7/7/7[PPPPPPPPPPPPPPPPPPPPPppppppppppppppppppppp] w - - 0 1
pieceDrops = true
dropOnTop = true
doubleStep = false
castling = false
stalemateValue = draw
immobilityIllegal = false
connectN = 4
nMoveRule = 0
