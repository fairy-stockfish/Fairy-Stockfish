image:
  - Visual Studio 2019
environment:
  matrix:
    - PYTHON: "C:\\Python37-x64"
    - PYTHON: "C:\\Python38-x64"
    - PYTHON: "C:\\Python39-x64"
    - PYTHON: "C:\\Python310-x64"

init:
  - "ECHO %PYTHON% %PYTHON_ARCH% %MSVC_VERSION%"

install:
  - ps: |
      if (-not (Test-Path $env:PYTHON)) {
        curl -o install_python.ps1 https://raw.githubusercontent.com/matthew-brett/multibuild/11a389d78892cf90addac8f69433d5e22bfa422a/install_python.ps1
        .\install_python.ps1
      }
  - ps: if (-not (Test-Path $env:PYTHON)) { throw "No $env:PYTHON" }
  - "set PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - python --version

  # We need wheel installed to build wheels
  - "%PYTHON%\\python.exe -m pip install wheel"

build: off

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  - "%PYTHON%\\python.exe setup.py test"

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - "%PYTHON%\\python.exe setup.py bdist_wheel"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
